package models

import "time"

// Site represents options for a single comment site
// An single instance will serve one site
type Site struct {
	SiteID uint64

	// random master salt for cookie encryption, salting hashses and so forth
	Salt []byte
}

// Page is any unit that has comments
type Page struct {
	PageID uint64

	// Key will usually be the full url of the containing page.
	// It can be any unique string though, if other scenarios are needed.
	Key string

	*Site
}

// User is a single commenter on a site. Identified by a random token only. The hash of the token is stored here.
type User struct {
	UserID uint64

	// Token is a unique value to identify a user. Token itself is generated by whatever auth implementation the site is running.
	// For anonymous access, a random token is generated on first action, and stored in a client-side cookie. It only serves to
	// correlate that user's action within that browser.
	// A third-party auth service may generate a token from hash("service:username:siteSalt") or similar, and store that client-side.
	//
	// The token is essentially a password to the user's comments on a site.
	// Care should be taken that any client-side values are encrypted and signed.
	//
	// Token must not be usable to correlate users across sites. If they login with github on two sites, the token should not help us know that.
	// Name/Email still may, but name is publicly visible, and both are optional.
	Token string

	// Name and email are associated with the user, and shared for all comments.
	// If they supply a different value elsewhere on the site, we will overwrite it.
	// Not sure I love that, but it is simple.
	Name  string
	Email string

	*Site
}

// Comment represents a single comment on a page
type Comment struct {
	CommentID uint64

	RawText string
	HTML    string
	Created time.Time

	*Page
	*User
}
